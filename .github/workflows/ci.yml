---
name: CI

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

jobs:
  build-test:
    name: Lint & Test (stable)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    env:
      POETRY_VIRTUALENVS_CREATE: "true"
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
          cache-dependency-path: "**/poetry.lock"

      - name: Install Poetry
        run: |
          if command -v pipx >/dev/null 2>&1; then
            pipx install "poetry==1.8.*"
          else
            python -m pip install --upgrade pip
            python -m pip install "poetry==1.8.*"
          fi

      - name: Install dependencies
        run: |
          poetry --version
          poetry install --no-interaction --no-ansi

      - name: Ruff (lint)
        run: poetry run ruff check .

      - name: Black (format check)
        run: poetry run black --check .

      - name: isort (imports)
        run: poetry run isort --check-only .

      - name: mypy (types)
        run: poetry run mypy .

      - name: Pytest with coverage (xml + html)
        run: |
          poetry run pip install --upgrade coverage pytest-cov
          poetry run pytest -q --maxfail=1 --disable-warnings \
            --cov=nextlevelapex --cov-branch \
            --cov-report=xml:coverage.xml \
            --cov-report=term \
            --cov-report=html:htmlcov

      - name: Upload coverage to Codecov (OIDC)
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: false
          verbose: true
          use_oidc: true
          # If you prefer token auth (e.g., private repo), instead:
          # token: ${{ secrets.CODECOV_TOKEN }}

      - name: List htmlcov (non-fatal)
        if: always()
        run: |
          echo "Checking for htmlcov/..."
          if [ -d "htmlcov" ]; then
            echo "Found htmlcov/, listing contents:"
            ls -lAR htmlcov/
          else
            echo "htmlcov/ not found (skipping)."
          fi

      - name: Upload coverage HTML (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-${{ matrix.python-version }}
          path: htmlcov/
          if-no-files-found: warn
          retention-days: 7

  experimental:
    name: Lint & Test (experimental Python)
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
    permissions:
      contents: read
      id-token: write
    env:
      POETRY_VIRTUALENVS_CREATE: "true"
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
          cache-dependency-path: "**/poetry.lock"
      - name: Install Poetry
        run: |
          if command -v pipx >/dev/null 2>&1; then
            pipx install "poetry==1.8.*"
          else
            python -m pip install "poetry==1.8.*"
          fi
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
      - name: Ruff
        run: poetry run ruff check .
      - name: Pytest + coverage
        run: |
          poetry run pip install --upgrade coverage pytest-cov
          poetry run pytest -q --maxfail=1 --disable-warnings \
            --cov=nextlevelapex --cov-branch \
            --cov-report=xml:coverage.xml \
            --cov-report=term
      - name: Codecov (OIDC)
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: false
          use_oidc: true
