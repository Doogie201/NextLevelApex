[build-system]
requires      = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

# ───────────────────────────── Poetry metadata ─────────────────────────────
[tool.poetry]
name         = "nextlevelapex"
version      = "0.1.1"
description  = "Apex-level macOS setup orchestrator"
readme       = "README.md"
license      = "MIT"
authors      = ["Marcus Smith <doogie201@gmail.com>"]
homepage     = "https://github.com/Doogie201/NextLevelApex"
repository   = "https://github.com/Doogie201/NextLevelApex.git"
documentation= "https://github.com/Doogie201/NextLevelApex#readme"
keywords     = ["macos", "automation", "setup", "cli", "orchestration", "diagnostics", "devops"]
classifiers  = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Typing :: Typed",
  "Operating System :: MacOS :: MacOS X"
]

# Packages + data files
packages = [{ include = "nextlevelapex" }]
include  = [
  "nextlevelapex/schema/*.json",
  "nextlevelapex/py.typed" # PEP 561 typing marker (create this empty file)
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/Doogie201/NextLevelApex/issues"
"Changelog"   = "https://github.com/Doogie201/NextLevelApex/releases"

# ───────────────────────────── Runtime deps ────────────────────────────────
[tool.poetry.dependencies]
python      = "^3.11"
# Typer/Click combo pinned to avoid the help-rendering regression you hit
click       = "<8.2.0"
typer       = "~0.16.1"
rich        = "^14"
jsonschema  = "^4.23.0"
colorlog    = "^6.8.0"
jinja2      = ">=3.1,<4"

[tool.poetry.extras]
cli = ["typer"]

[tool.poetry.scripts]
nlx = "nextlevelapex.main:app"

# ───────────────────────────── Dev groups ──────────────────────────────────
[tool.poetry.group.dev]
optional = false

[tool.poetry.group.dev.dependencies]
ruff            = "^0.11.9"
mypy            = "^1.15.0"
types-requests  = "^2.32.0"
pytest          = "^8.3.5"
pytest-cov      = "^6.1.1"
pytest-xdist    = "^3.6.1"
pytest-randomly = "^3.15.0"
coverage        = "^7.8.0"
black           = "^23.12.1"
isort           = "^5.13.2"
pre-commit      = "^3.6.0"
yamllint        = "^1.37.1"
poethepoet      = "^0.29.0"
commitizen      = "^3.30.0"
types-PyYAML = "^6.0.12.20250809"
types-jsonschema = "^4.25.0.20250809"

# ───────────────────────────── Ruff (lint+format) ─────────────────────────
[tool.ruff]
target-version = "py311"
line-length    = 100
extend-exclude = ["dist", "build", ".venv", "venv", ".mypy_cache", ".pytest_cache", "htmlcov", "nextlevelapex/main2.py",]
force-exclude  = true

[tool.ruff.lint]
# Curated ruleset: pyflakes/pycodestyle + modernizations + correctness
select = [
  "F",  # pyflakes
  "E", "W",  # pycodestyle
  "I",      # isort
  "UP",     # pyupgrade
  "B",      # bugbear
  "C4",     # comprehensions
  "SIM",    # simplify
  "PTH",    # pathlib
  "PIE",    # flake8-pie
  "PERF",   # performance
  "RUF"     # ruff-specific
]
ignore = [
  "E501",   # handled by formatter
  "B905",   # zip strictness (opt-in later)
  "RUF001","RUF002","RUF003",  # fancy punctuation stays
  "PTH123",  # Path.open migration later
  "PIE796",  # enum duplicate (also fixed in code, but safe)
  "I", # isort handled by isort plugin
]

# file-specific waivers (keeps __init__ exports clean without F401 noise)
[tool.ruff.lint.per-file-ignores]
"nextlevelapex/__init__.py" = ["F401"]
"nextlevelapex/main.py"     = ["B008"]
"tests/**" = ["S101","ARG001","PLR2004","E402"]

[tool.ruff.lint.isort]
known-first-party = ["nextlevelapex"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true

# ───────────────────────────── Black (formatter) ───────────────────────────
[tool.black]
line-length = 100
target-version = ["py311"]
skip-string-normalization = true

# ───────────────────────────── isort (harmonize with Black/Ruff) ──────────
[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["nextlevelapex"]

# ───────────────────────────── mypy (typing) ───────────────────────────────
[tool.mypy]
python_version = "3.11"
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
pretty = true
# Let tests be looser while keeping src strict
plugins = []
exclude = '^(build|dist|venv|.venv|htmlcov)/'
files = ["nextlevelapex", "tests"]
mypy_path = ["."]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
warn_return_any = false

# ───────────────────────────── Pytest + Coverage ───────────────────────────
[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
filterwarnings = [
  "ignore:open_text is deprecated:DeprecationWarning",
]
addopts = [
  "-q",
  "-n=auto",
  "--maxfail=1",
  "--cov=nextlevelapex.utils.sanitizer",
  "--cov=nextlevelapex.core.registry",
  "--cov=nextlevelapex.core.smartconfig",
  "--cov=nextlevelapex.core.types",
  "--cov=nextlevelapex.tasks.shared",
  "--cov-report=term-missing:skip-covered",
  "--cov-config=.coveragerc",
  "--cov-fail-under=85",
]
[tool.coverage.run]
source   = ["nextlevelapex"]
branch   = true
parallel = true
omit = [
  # Big integration surfaces you can re-enable as you add tests
  "nextlevelapex/main2.py",
  "nextlevelapex/core/report.py",
  "nextlevelapex/core/diagnostics.py",
  "nextlevelapex/core/command.py",
  "nextlevelapex/core/state.py",
  "nextlevelapex/core/config.py",
  "nextlevelapex/tasks/brew.py",
  "nextlevelapex/tasks/launch_agents.py",
  "nextlevelapex/tasks/dns_stack.py",
  "nextlevelapex/tasks/network.py",
  "nextlevelapex/tasks/pihole.py",
  "nextlevelapex/tasks/optional.py",
  "nextlevelapex/tasks/system.py",
  "nextlevelapex/tasks/ollama.py",
  "nextlevelapex/tasks/cloudflared.py",
  "nextlevelapex/tasks/dns_sanity.py"
]

[tool.coverage.report]
fail_under   = 85
skip_covered = false
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == \"__main__\":"
]

# ───────────────────────────── Poe the Poet (task runner) ──────────────────
[tool.poe.tasks.fmt]
sequence = [
  { cmd = "ruff format ." },
  { cmd = "black ." }
]

[tool.poe.tasks.lint]
cmd = "ruff check . --fix"

[tool.poe.tasks.type-install]
cmd = "mypy --install-types --non-interactive"

[tool.poe.tasks.type]
cmd = "mypy"

[tool.poe.tasks.test]
cmd = "pytest"

[tool.poe.tasks.testcov]
cmd = "pytest --cov"

[tool.poe.tasks.ci]
sequence = [
  { ref = "lint" },
  { ref = "type" },
  { ref = "test" }
]

# ───────────────────────────── Commitizen (conventional commits) ───────────
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.1"
tag_format = "v$version"
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"
version_files = ["pyproject.toml:version"]
# ----------------------------- nlx typing overrides -----------------------------
# nlx-mypy-overrides
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "nextlevelapex.tasks.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "nextlevelapex.main2"
ignore_errors = true

# Helpers that are not worth strict typing right now
[[tool.mypy.overrides]]
module = "nextlevelapex.core.config"
disallow_untyped_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "nextlevelapex.utils.sanitizer"
disallow_untyped_defs = false
